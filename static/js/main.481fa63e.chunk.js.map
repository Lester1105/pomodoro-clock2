{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["audio","document","getElementById","SetTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","App","state","breakCount","sessionCount","clockCount","currentTimer","loop","undefined","isPlaying","handlePlayPause","clearInterval","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","minutes","Math","floor","second","handleBreakDecrease","handleBreakIncrease","handleSessionDecrease","handleSessionIncrease","this","breakProps","sessionProps","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+QAKMA,EAAOC,SAASC,eAAe,QAC/BC,EAAS,SAACC,GACd,IAAMC,EAAID,EAAME,MAAMC,cACtB,OACF,sBAAKC,UAAU,kBAAf,UACE,oBAAIH,GAAE,UAAKA,EAAL,UAAN,mBAA2BD,EAAME,MAAjC,aACA,sBAAKE,UAAU,sBAAf,UACI,wBAAQC,QAASL,EAAMM,eAAgBL,GAAE,UAAKA,EAAL,cAAzC,SAA8D,cAAC,IAAD,MAChE,sBAAMA,GAAE,UAAKA,EAAL,WAAR,SAA2BD,EAAMO,QACjC,wBAAQF,QAASL,EAAMQ,eAAgBP,GAAE,UAAKA,EAAL,cAAzC,SAA8D,cAAC,IAAD,aAoKnDQ,E,kDA7Jb,WAAYT,GAAO,IAAD,8BAChB,cAAMA,IAMRU,MAAO,CACLC,WAAW,EACXC,aAAa,GACbC,WAAW,KACVC,aAAa,UACbC,UAAKC,EACLC,WAAU,GAbK,EAkBlBC,gBAAgB,WACI,EAAKR,MAAhBO,WAELE,cAAc,EAAKJ,MACnB,EAAKK,SAAS,CAACH,WAAU,MAE3B,EAAKG,SAAS,CAACH,WAAU,IACzB,EAAKF,KAAKM,aAAY,WACpB,MAAwD,EAAKX,MAAtDG,EAAP,EAAOA,WAAWC,EAAlB,EAAkBA,aAAaH,EAA/B,EAA+BA,WAAWC,EAA1C,EAA0CA,aAC1B,IAAbC,GACD,EAAKO,SAAS,CAACN,aAA4B,YAAfA,EAAyB,QAAQ,UAC/DD,WAA2B,YAAfC,EAAsC,GAAXH,EAA6B,GAAbC,IAEzDhB,EAAM0B,QAEJ,EAAKF,SAAS,CAACP,WAAWA,EAAW,MAEpC,OAnCa,EAsClBU,YAAa,WACX,EAAKH,SAAS,CACZT,WAAW,EACdC,aAAa,GACbC,WAAW,KACVC,aAAa,UACbG,WAAU,IAEVE,cAAc,EAAKJ,MACnBnB,EAAM4B,QACN5B,EAAM6B,YAAY,GAhDF,EAoDpBC,cAAc,SAACnB,GACf,IAAIoB,EAAQC,KAAKC,MAAMtB,EAAM,IACzBuB,EAAOvB,EAAM,GAGf,OADFuB,EAAOA,EAAS,GAAK,IAAIA,EAASA,EAC1B,GAAN,OAFFH,EAAQA,EAAU,GAAK,IAAKA,EAAUA,EAEpC,YAAoBG,IAzDF,EA4DpBC,oBAAoB,WACpB,MAA0C,EAAKrB,MAAxCC,EAAP,EAAOA,WAAWM,EAAlB,EAAkBA,UAAUH,EAA5B,EAA4BA,aAEzBH,EAAW,IAERM,GAA2B,UAAfH,EAMhB,EAAKM,SAAS,CAACT,WAAWA,EAAW,IALrC,EAAKS,SAAS,CACZT,WAAWA,EAAW,EACtBE,WAA0B,IAAdF,EAAW,OApEP,EA2EpBqB,oBAAoB,WAClB,MAA0C,EAAKtB,MAAxCC,EAAP,EAAOA,WAAWM,EAAlB,EAAkBA,UAAUH,EAA5B,EAA4BA,aAE3BH,EAAW,KAERM,GAA2B,UAAfH,EAMhB,EAAKM,SAAS,CAACT,WAAWA,EAAW,IALrC,EAAKS,SAAS,CACZT,WAAWA,EAAW,EACtBE,WAA0B,IAAdF,EAAW,OAnFP,EA0FpBsB,sBAAsB,WACpB,MAA4C,EAAKvB,MAA1CE,EAAP,EAAOA,aAAaK,EAApB,EAAoBA,UAAUH,EAA9B,EAA8BA,aAE7BF,EAAa,IAEVK,GAA2B,YAAfH,EAMhB,EAAKM,SAAS,CAACR,aAAaA,EAAa,IALzC,EAAKQ,SAAS,CACZR,aAAaA,EAAa,EAC1BC,WAA4B,IAAhBD,EAAa,OAlGT,EAyGpBsB,sBAAsB,WACpB,MAA4C,EAAKxB,MAA1CE,EAAP,EAAOA,aAAaK,EAApB,EAAoBA,UAAUH,EAA9B,EAA8BA,aAE7BF,EAAa,KAEVK,GAA2B,YAAfH,EAMhB,EAAKM,SAAS,CAACR,aAAaA,EAAa,IALzC,EAAKQ,SAAS,CACZR,aAAaA,EAAa,EAC1BC,WAA4B,IAAhBD,EAAa,OA/GzB,EAAKG,UAAKC,EAFM,E,wDAIlB,WACEG,cAAcgB,KAAKpB,Q,oBAmHrB,WACE,MAAwDoB,KAAKzB,MAAtDC,EAAP,EAAOA,WAAWC,EAAlB,EAAkBA,aAAaC,EAA/B,EAA+BA,WAAWC,EAA1C,EAA0CA,aACxCsB,EAAW,CACflC,MAAM,QACNK,MAAMI,EACNL,eAAe6B,KAAKJ,oBACpBvB,eAAe2B,KAAKH,qBAEhBK,EAAa,CACjBnC,MAAM,UACNK,MAAMK,EACNN,eAAe6B,KAAKF,sBACpBzB,eAAe2B,KAAKD,uBAGpB,OACE,qBAAK9B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,OAAf,UACR,cAAC,EAAD,eAAcgC,IACd,cAAC,EAAD,eAAcC,OAGN,sBAAKjC,UAAU,kBAAf,UACE,oBAAIH,GAAG,cAAP,SAAsBa,IAC5B,sBAAMb,GAAG,YAAT,SAAsBkC,KAAKT,cAAcb,KAEzC,sBAAKT,UAAU,OAAf,UACE,yBAAQC,QAAS8B,KAAKjB,gBAAiBjB,GAAG,aAA1C,UAAuD,cAAC,IAAD,IAAkB,cAAC,IAAD,OAC3E,wBAAQI,QAAS8B,KAAKZ,YAAatB,GAAG,QAAtC,SAA8C,cAAC,IAAD,qB,GAtJhCqC,IAAMC,WCRTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASC,eAAe,SAM1B0C,M","file":"static/js/main.481fa63e.chunk.js","sourcesContent":["\nimport './App.css';\nimport { BsCaretDownFill,BsCaretUpFill,BsFillPauseFill,BsFillPlayFill,BsArrowRepeat } from 'react-icons/bs';\nimport React from 'react';\n\nconst audio =document.getElementById('beep');\nconst SetTimer=(props)=>{\n  const id= props.title.toLowerCase();\n  return(\n<div className='timer-container'>\n  <h2 id={`${id}-label`}>{`${props.title} Length`}</h2>\n  <div className='flex action-wrapper'>\n      <button onClick={props.handleDecrease} id={`${id}-decrement`}><BsCaretDownFill /></button>\n    <span id={`${id}-length`}>{props.count}</span>\n    <button onClick={props.handleIncrease} id={`${id}-increment`}><BsCaretUpFill /></button>\n  </div>\n</div>\n\n  );}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.loop=undefined;\n  }\n  componentWillUnmount(){\n    clearInterval(this.loop);\n  }\n  state ={\n    breakCount:5,\n    sessionCount:25,\n    clockCount:25*60,\n     currentTimer:'Session',\n     loop:undefined,\n     isPlaying:false\n  }\n\n  \n\n  handlePlayPause=()=>{\n    const {isPlaying}=this.state;\n    if(isPlaying){\n      clearInterval(this.loop);\n      this.setState({isPlaying:false});\n    }else{\n    this.setState({isPlaying:true});\n    this.loop=setInterval(() => {\n      const {clockCount,currentTimer,breakCount,sessionCount}=this.state;\n      if(clockCount===0){\n        this.setState({currentTimer:currentTimer===\"Session\"?\"Break\":\"Session\",\n      clockCount:(currentTimer==='Session')?(breakCount*60):(sessionCount*60)\n    })\n    audio.play();\n      }else{\n      this.setState({clockCount:clockCount-1})\n    }\n    }, 1000);\n  }}\n\n  handleReset =() =>{\n    this.setState({\n      breakCount:5,\n   sessionCount:25,\n   clockCount:25*60,\n    currentTimer:'Session',\n    isPlaying:false\n    });\n    clearInterval(this.loop);\n    audio.pause();\n    audio.currentTime=0;\n  }\n  \n \nconvertToTime=(count)=>{\nlet minutes=Math.floor(count/60);\nlet second=count%60;\nminutes=minutes < 10? ('0'+ minutes) :minutes;\nsecond=second < 10? ('0'+second) :second;\n  return`${minutes}:${second}`;\n}\n\nhandleBreakDecrease=()=>{\nconst {breakCount,isPlaying,currentTimer}=this.state;\n\nif(breakCount>1){\n\n  if(!isPlaying &&currentTimer==='Break'){\n  this.setState({\n    breakCount:breakCount-1,\n    clockCount:(breakCount-1)*60\n      });\n  }else{\n  this.setState({breakCount:breakCount-1})\n    }\n  }\n}\nhandleBreakIncrease=()=>{\n  const {breakCount,isPlaying,currentTimer}=this.state;\n  \nif(breakCount<60){\n\n  if(!isPlaying &&currentTimer==='Break'){\n  this.setState({\n    breakCount:breakCount+1,\n    clockCount:(breakCount+1)*60\n      });\n  }else{\n  this.setState({breakCount:breakCount+1})\n    }\n  }\n}\nhandleSessionDecrease=()=>{\n  const {sessionCount,isPlaying,currentTimer}=this.state;\n \nif(sessionCount>1){\n\n  if(!isPlaying &&currentTimer==='Session'){\n  this.setState({\n    sessionCount:sessionCount-1,\n    clockCount:(sessionCount-1)*60\n      });\n  }else{\n  this.setState({sessionCount:sessionCount-1})\n    }\n  }\n}\nhandleSessionIncrease=()=>{\n  const {sessionCount,isPlaying,currentTimer}=this.state;\n \nif(sessionCount<60){\n\n  if(!isPlaying &&currentTimer==='Session'){\n  this.setState({\n    sessionCount:sessionCount+1,\n    clockCount:(sessionCount+1)*60\n      });\n  }else{\n  this.setState({sessionCount:sessionCount+1})\n    }\n  }\n}\n  render (){\n    const {breakCount,sessionCount,clockCount,currentTimer}=this.state;\nconst breakProps={\n  title:'Break',\n  count:breakCount,\n  handleDecrease:this.handleBreakDecrease,\n  handleIncrease:this.handleBreakIncrease\n}\nconst sessionProps={\n  title:'Session',\n  count:sessionCount,\n  handleDecrease:this.handleSessionDecrease,\n  handleIncrease:this.handleSessionIncrease\n}\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className='flex'>\n<SetTimer {...breakProps}/>\n<SetTimer {...sessionProps}/>\n        </div>\n\n        <div className='clock-container'>\n          <h2 id=\"timer-label\">{currentTimer}</h2>\n    <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\n    \n    <div className='flex'>\n      <button onClick={this.handlePlayPause} id='start_stop'><BsFillPlayFill /><BsFillPauseFill /></button>\n    <button onClick={this.handleReset} id=\"reset\"><BsArrowRepeat /></button>\n      </div>\n    </div>\n      </header>\n    </div>\n  );\n}}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}